@using Microsoft.AspNetCore.Components.Web
@namespace BotBlazorApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BotBlazorApp.styles.css" rel="stylesheet" />
    <link href="https://cdn.syncfusion.com/blazor/19.4.48/styles/bootstrap5.css" rel="stylesheet" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

<script src="_framework/blazor.server.js"></script>
<script src="https://cdn.syncfusion.com/blazor/20.1.47/syncfusion-blazor.min.js" type="text/javascript"></script>
<!--suppress JSUnresolvedLibraryURL -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<!--suppress JSUnresolvedLibraryURL -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js"></script>
<!--suppress JSUnresolvedLibraryURL -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
<script>
    window.loadChartData = (labels, ema, lastPrice, entryPrice, highPrice, exitPrice, borderUp, borderDown, resetBorderUp, resetBorderDown) => {
        var config = {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: "ema",
                    backgroundColor: 'rgb(252, 186, 3)',
                    borderColor: 'rgb(252, 186, 3)',
                    data: ema,
                    borderWidth: 2,
                    fill: false,
                    pointRadius: 0
                },
                {
                    label: "lastPrice",
                    backgroundColor: 'rgb(0, 208, 255)',
                    borderColor: 'rgb(0, 208, 255)',
                    data: lastPrice,
                    borderWidth: 1,
                    fill: false,
                    pointRadius: 0
                },
                {
                    label: "entryPrice",
                    backgroundColor: 'rgba(0, 120, 0, 0.2)',
                    borderColor: 'rgb(0, 0, 0)',
                    data: entryPrice,
                    // borderDash: [5, 5],
                    borderWidth: 3,
                    fill: 3,
                    pointRadius: 0
                },
                {
                    label: "highPrice",
                    backgroundColor: 'rgb(84, 84, 84)',
                    borderColor: 'rgb(84, 84, 84)',
                    data: highPrice,
                    borderWidth: 3,
                    borderDash: [1, 1],
                    fill: false,
                    pointRadius: 0
                },
                {
                    label: "exitPrice",
                    backgroundColor: 'rgb(255, 0, 0)',
                    borderColor: 'rgb(255, 0, 0)',
                    data: exitPrice,
                    borderWidth: 2,
                    borderDash: [10, 10],
                    fill: false,
                    pointRadius: 0
                },
                {
                    label: "borderUp",
                    backgroundColor: 'rgba(100, 100, 100, 0.2)',
                    borderColor: 'rgb(0, 0, 0)',
                    data: borderUp,
                    borderWidth: 1,
                    borderDash: [5, 5],
                    fill: 8,
                    pointRadius: 0
                },
                {
                    label: "borderDown",
                    backgroundColor: 'rgb(0, 0, 0)',
                    borderColor: 'rgb(0, 0, 0)',
                    data: borderDown,
                    borderWidth: 1,
                    borderDash: [5, 5],
                    fill: false,
                    pointRadius: 0
                },
                {
                    label: "resetBorderUp",
                    backgroundColor: 'rgba(150, 150, 150, 0.2)',
                    borderColor: 'rgb(0, 100, 100)',
                    data: resetBorderUp,
                    borderWidth: 1,
                    borderDash: [5, 5],
                    fill: 10,
                    pointRadius: 0
                },
                {
                    label: "resetBorderDown",
                    backgroundColor: 'rgb(0, 0, 0)',
                    borderColor: 'rgb(0, 100, 100)',
                    data: resetBorderDown,
                    borderWidth: 1,
                    borderDash: [5, 5],
                    fill: false,
                    pointRadius: 0
                
            }]
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: 'BALI_FUTURE'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false
                },
                hover: {
                    mode: 'nearest',
                    intersect: false
                },
                scales: {
                    xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Time'
                        }
                    }],
                    yAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'Value'
                        }
                    }]
                }
            }
        };

        var context = document.getElementById('canvasChart').getContext('2d');

        var lineChart = new Chart(context, config);

        var source = new EventSource("/api/bot/chartData");

        source.onmessage = function (event) {
            var data = JSON.parse(event.data);

            if (config.data.labels.length === 300) {
                config.data.labels.shift();
                config.data.datasets[0].data.shift();
                config.data.datasets[1].data.shift();
                config.data.datasets[2].data.shift();
                config.data.datasets[3].data.shift();
                config.data.datasets[4].data.shift();
                config.data.datasets[5].data.shift();
                config.data.datasets[6].data.shift();
                config.data.datasets[7].data.shift();
                config.data.datasets[8].data.shift();
                
            }
            config.data.labels.push(data.time);
            config.data.datasets[0].data.push(NaN);
            config.data.datasets[1].data.push(NaN);
            config.data.datasets[2].data.push(NaN);
            config.data.datasets[3].data.push(NaN);
            config.data.datasets[4].data.push(NaN);
            config.data.datasets[5].data.push(NaN);
            config.data.datasets[6].data.push(NaN);
            config.data.datasets[7].data.push(NaN);
            config.data.datasets[8].data.push(NaN);

            lineChart.update();
        }
    };
</script>
</body>
</html>
