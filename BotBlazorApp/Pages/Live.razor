@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Charts
@using BotBlazorApp.Services
@using BotBlazorApp.Data
@using AutoMapper
@using System.Collections.ObjectModel
@inject IBotChartDataService _bodDataService;
@inject ILogger<Live> _logger;
@inject NavigationManager _navigationManager;
@inject IUnitOfWork _unitOfWork;
@inject IMapper _mapper;

<PageTitle>Live</PageTitle>

<SfStockChart @ref="_liveChart" Title="Bot Data">
    <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
    <StockChartTooltipSettings Enable="true" Shared="true" Format="${point.x} : ${point.y}" Header="X"></StockChartTooltipSettings>
    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@StockChartData" Type="ChartSeriesType.Line" XName="@nameof(BotChartData.Date)" YName="@nameof(BotChartData.LastPrice)"></StockChartSeries>
        <StockChartSeries DataSource="@StockChartData" Type="ChartSeriesType.Line" XName="@nameof(BotChartData.Date)" YName="@nameof(BotChartData.EMA200)"></StockChartSeries>
        @*<StockChartSeries DataSource="@StockChartData" Type="ChartSeriesType.RangeArea" XName="@nameof(BotChartData.Date)"  High="@nameof(BotChartData.EmaInUp)" Low="@nameof(BotChartData.EmaInDown)" Opacity="0.5" Fill="blue"></StockChartSeries>*@
    </StockChartSeriesCollection>
    @*<StockChartIndicators>
        <StockChartIndicator Type="TechnicalIndicators.Ema" SeriesName="LastPrice" Fill="blue" Period="14"></StockChartIndicator>
    </StockChartIndicators>*@
</SfStockChart>

<p>Date refresh: @_dateTime.ToString("yyyy-MM-dd HH:mm:ss")</p>

@code {

    SfStockChart? _liveChart;
    public ObservableCollection<BotChartData> StockChartData { get; set; }

    protected override async void OnInitialized()
    {
        var botChartDataEntitiesList = await _unitOfWork.BotChartDataRepository.GetAsync(s => s.Date > DateTime.Now.AddMinutes(-10));
        var botChartDataList = _mapper.Map<List<BotChartData>>(botChartDataEntitiesList);
        StockChartData = new ObservableCollection<BotChartData>(botChartDataList);

        //StockChartData = new ObservableCollection<BotChartData>();

        var url = _navigationManager.ToAbsoluteUri("/botchartdatahub");
        var hubConnection = new HubConnectionBuilder().WithUrl(url).Build();

        hubConnection.On<BotChartData>("ReceiveBotChartData", async(botChartData) =>
        {
            await AddBotChartData(botChartData);
        });

        await hubConnection.StartAsync();
    }

    private async Task AddBotChartData(BotChartData botChartData)
    {
        if(_liveChart == null )
            return;

        await InvokeAsync(() =>
        {
            _dateTime = DateTime.Now;
            StockChartData.Add(botChartData);
            _liveChart.Refresh();
            StateHasChanged();
        });
    }
    
    DateTime _dateTime = DateTime.Now;
}