@page "/live"
@inject IBotChartDataService _bodDataService;
@inject ILogger<Live> _logger;
@using BotBlazorApp.Services
@using System.Collections.ObjectModel
@using System.Timers
@using Syncfusion.Blazor.Charts
@implements IDisposable;

<PageTitle>Live</PageTitle>

<SfStockChart Title="Bot Data" @ref="_stockChart">
    <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>
    <StockChartTooltipSettings Enable="true" Shared="true" Format="${point.x} : ${point.y}" Header="X"></StockChartTooltipSettings>
    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@_stockChartData" Type="ChartSeriesType.Line" XName="Date" YName="LastPrice" High="HighPrice" Low="LastPrice" Open="EntryPrice" Close="ExitPrice"></StockChartSeries>
    </StockChartSeriesCollection>
</SfStockChart>

<p>Date refresh: @_dateTime.ToString("yyyy-MM-dd HH:mm:ss")</p>

@code {
    private readonly ObservableCollection<BotChartData?>? _stockChartData = new();

    private async Task GetAndUpdateChartData()
    {
        try
        {
            var result = await _bodDataService.GetBotChartDataAsync();
            _stockChartData?.Add(result);
            _stockChart?.Refresh();
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error getting chart data");
        }
    }

    private Timer _timer = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    // create the timer
        _timer = new Timer(1000);
        _timer.Start();

        _timer.Elapsed += (_, _) =>
        {
            InvokeAsync(async () =>
            {
                _dateTime = DateTime.Now;
                await GetAndUpdateChartData();
                StateHasChanged();
            });
        };
    }

    DateTime _dateTime = DateTime.Now;
    private SfStockChart? _stockChart;

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }

}