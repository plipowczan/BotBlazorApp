@page "/live"
@inject IBotChartDataService _bodDataService;
@inject ILogger<Live> _logger;
@using BotBlazorApp.Services
@using System.Collections.ObjectModel
@using System.Timers
@using Syncfusion.Blazor.Charts
@implements IDisposable;

<PageTitle>Live</PageTitle>

<SfChart Title="Bot Data">
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" LabelFormat="HH:mm:ss" Title="Time (s)">
        <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
    </ChartPrimaryXAxis>
    <ChartArea>
        <ChartAreaBorder Width="1"></ChartAreaBorder>
    </ChartArea>
    <ChartPrimaryYAxis Title="LastPrice" Interval="20" LabelFormat="{value} USD">
        <ChartAxisLineStyle Width="1" Color="transparent"></ChartAxisLineStyle>
    </ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries Type="ChartSeriesType.Line" Width="2" DataSource="@_stockChartData"
                     XName="@nameof(BotChartData.Date)" YName="@nameof(BotChartData.LastPrice)">
            <ChartSeriesAnimation Enable="false"></ChartSeriesAnimation>
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>

<p>Date refresh: @_dateTime.ToString("yyyy-MM-dd HH:mm:ss")</p>

@code {

    private ObservableCollection<BotChartData> _stockChartData = new();

    private async Task GetAndUpdateChartData()
    {
        try
        {
            if(_stockChartData.Count > 2000)
                _stockChartData.RemoveAt(0);

            var result = await _bodDataService.GetBotChartDataAsync();
            _stockChartData.Add(result);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Error getting chart data");
        }
    }

    private Timer _timer = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _stockChartData = new ObservableCollection<BotChartData>();
        // create the timer
        _timer = new Timer(500);
        _timer.Start();

        _timer.Elapsed += (_, _) =>
        {
            InvokeAsync(async () =>
            {
                _dateTime = DateTime.Now;
                await GetAndUpdateChartData();
                StateHasChanged();
            });
        };
    }

    DateTime _dateTime = DateTime.Now;

    public void Dispose()
    {
        _timer.Stop();
        _timer.Dispose();
    }

}